What languages have the most important algorithms written in them?
That is, what languages would you have to implement in a time capsule
virtual machine in order to preserve our most important algorithmic
knowledge?

There’s an enormous amount of software written in C, but generally the
algorithms are implemented in a fairly tailored fashion — they aren’t
generalizable beyond the specific application, so they have to be
written again for the next time.  And it takes a lot of C code to get
anything done.

My guess is on the following list:

- Fortran for numerical algorithms, many of which don’t have
  equivalents implemented in the other languages below (because
  everyone just uses the Fortran implementations)
- R for statistical algorithms
- Python with Numpy and Scipy for a lot of other numerical algorithms
- JS for the worlds of crap in npm
- C for cryptographic algorithms, file format decoders
  (e.g. pngtopnm), compression formats, a few other related things

Unfortunately, this probably still doesn’t cover most of the classic
algorithms you’d find in an algorithms textbook, at least in a
reusable way.  Some of them have generic implementations in C++, but
C++ is far too hairy to hope to support.
